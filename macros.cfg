#####################################################################
#   Macros
#####################################################################


[gcode_macro PRINT_START]
gcode:
    {% set BED = params.BED|default(110)|int %}
    {% set HOTEND = params.HOTEND|default(250)|int %}

    SET_LED_EFFECT EFFECT=display_dial_default STOP=1
    SET_LED_EFFECT EFFECT=display_dial_heating_abs STOP=1
    SET_LED_EFFECT EFFECT=display_dial_heating_pla STOP=1

    M117 Heating bed...
    {% if BED < 110 %}                ;  set dial color to bed ABS/PLA
        SET_LED_EFFECT EFFECT=display_dial_heating_pla
    {% else %}
        SET_LED_EFFECT EFFECT=display_dial_heating_abs
    {% endif %}
    M190 S{BED}                       ; set final bed temperature and wait for it to be reached
    SET_LED_EFFECT EFFECT=display_dial_heating_abs STOP=1
    SET_LED_EFFECT EFFECT=display_dial_heating_pla STOP=1
    {% if BED < 110 %}                ;  set dial color to bed ABS/PLA
        SET_LED_EFFECT EFFECT=display_dial_pla
    {% else %}
        SET_LED_EFFECT EFFECT=display_dial_abs
    {% endif %}
    M117 Pre-heating hotend...
    M104 S{HOTEND*0.60}               ; start preheating hotend to non-ooze temperature prior to homing and mesh
    SET_LED_EFFECT EFFECT=status_idle STOP=1
    SET_LED_EFFECT EFFECT=status_heating_abs STOP=1
    SET_LED_EFFECT EFFECT=status_heating_pla STOP=1
    {% if HOTEND < 230 %}             ;  set SB color to heating ABS/PLA
        SET_LED_EFFECT EFFECT=status_heating_pla
    {% else %}
        SET_LED_EFFECT EFFECT=status_heating_abs
    {% endif %}
    SET_LED_EFFECT EFFECT=status_homing
    {% if "xyz" not in printer.toolhead.homed_axes %}
      M117 Homing XYZ...
      G28
    {% else %}
      M117 Updating Z...
      G28 Z
    {% endif %}
    SET_LED_EFFECT EFFECT=status_homing STOP=1
    SET_LED_EFFECT EFFECT=status_leveling
    {% if printer.z_tilt.applied %}
    {% else %}
      M117 Leveling...
      Z_TILT_ADJUST
    {% endif %}
    M117 Calibrating mesh...
    SET_LED_EFFECT EFFECT=status_leveling STOP=1
    SET_LED_EFFECT EFFECT=status_meshing
    BED_MESH_CALIBRATE
    SET_LED_EFFECT EFFECT=status_meshing STOP=1
    SET_LED_EFFECT EFFECT=status_nozzle_printing
    M117 Updating Z...
    G28 Z

    #Purge Line Gcode
    G92 E0
    G90
    #G0 X5 Y5 F6000                  ; for purge line
    G0 X191 Y302 F6000               ; for decontaminator
    M117 Heating hotend...
    M109 S{HOTEND}                   ; set final hotend temperature and wait for it to be reached
    {% if HOTEND < 230 %}            ;  set SB color to heating ABS/PLA
        SET_LED_EFFECT EFFECT=status_heating_pla STOP=1
        SET_LED_EFFECT EFFECT=status_printing_pla
    {% else %}
        SET_LED_EFFECT EFFECT=status_heating_abs STOP=1
        SET_LED_EFFECT EFFECT=status_printing_abs
    {% endif %}
    M117 Purging...
    CLEAN_NOZZLE
    #PURGE
    #ADAPTIVE_PURGE
    M117 Printing...


[gcode_macro PRINT_END]
gcode:
    M117 Print complete

    #  Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #  Check end position to determine safe directions to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    #  Commence PRINT_END
    M400                             ; wait for buffer to clear
    G92 E0                           ; zero the extruder
    #G1 E-10.0 F3600                  ; retract
    G91                              ; relative positioning
    G0 Z{z_safe} F3600               ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000    ; move nozzle to remove stringing
    M104 S0                          ; turn off hotend
    M140 S0                          ; turn off bed
    M106 S0                          ; turn off fan
    G90                              ; absolute positioning
    #G0 X{max_x / 2} Y{max_y} F3600   ; park nozzle at rear
    G0 X191 Y302 F6000               ; park nozzle at rear
    FORM_TIP
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=status_idle
    SET_LED_EFFECT EFFECT=display_screen_default
    SET_LED_EFFECT EFFECT=display_dial_default
    SET_LED_EFFECT EFFECT=probe_flash


[gcode_macro PRINT_CONTINUE]
gcode:
    {% set BED = params.BED|default(110)|int %}
    {% set HOTEND = params.HOTEND|default(250)|int %}

    M117 Heating bed...
    M190 S{BED}                       ; set final bed temperature and wait for it to be reached
    SET_LED_EFFECT EFFECT=display_dial_heating_abs STOP=1
    SET_LED_EFFECT EFFECT=display_dial_heating_pla STOP=1
    {% if BED < 100 %}            ;  set dial color to bed ABS/PLA
        SET_LED_EFFECT EFFECT=display_dial_pla
    {% else %}
        SET_LED_EFFECT EFFECT=display_dial_abs
    {% endif %}
    M117 Pre-heating hotend...
    M104 S{HOTEND*0.60}               ; start preheating hotend to non-ooze temperature prior to homing and mesh
    SET_LED_EFFECT EFFECT=status_idle STOP=1
    SET_LED_EFFECT EFFECT=status_heating_abs STOP=1
    SET_LED_EFFECT EFFECT=status_heating_pla STOP=1
    {% if HOTEND < 230 %}            ;  set SB color to heating ABS/PLA
        SET_LED_EFFECT EFFECT=status_heating_pla
    {% else %}
        SET_LED_EFFECT EFFECT=status_heating_abs
    {% endif %}
    BED_MESH_PROFILE LOAD=default
    #M117 Updating Z...
    #G28 Z

    #Purge Line Gcode
    G92 E0
    G90
    #G0 X5 Y5 F6000                  ; for purge line
    G0 X191 Y302 F6000               ; for decontaminator
    M117 Heating hotend...
    M109 S{HOTEND}                   ; set final hotend temperature and wait for it to be reached
    {% if HOTEND < 230 %}            ;  set SB color to heating ABS/PLA
        SET_LED_EFFECT EFFECT=status_heating_pla STOP=1
        SET_LED_EFFECT EFFECT=status_printing_pla
    {% else %}
        SET_LED_EFFECT EFFECT=status_heating_abs STOP=1
        SET_LED_EFFECT EFFECT=status_printing_abs
    {% endif %}
    M117 Purging...
    CLEAN_NOZZLE
    #PURGE
    #ADAPTIVE_PURGE
    M117 Printing...


[gcode_macro PURGE]
description: Normal bed-front purge line
gcode:
    M117 Purging...
    G0 Z0.4
    G91
    G1 X100 E25 F1200
    G1 Z6 F3000                       ; move platform down 6mm
    G92 E0
    G90
    G92 E0                            ; zero the extruded length again
    G1 F9000


[gcode_macro FORM_TIP]
description: Helper: Round the filament tip
gcode:
  G92 E0   ; zero the extruder
  M83      ; relative extrusion
  G1 E2 F100
  G1 E-2
  G1 E4
  G1 E-10
  #G1 E-25


[gcode_macro CENTER]
gcode:
    G90                        ; absolute positioning
    G0 Z25 F3600               ; move nozzle up
    G0 X150 Y150 F6000


[gcode_macro FRONT]
gcode:
    G90                        ; absolute positioning
    G0 Z25 F3600               ; move nozzle up
    G0 X150 Y40 F6000


[gcode_macro REAR]
gcode:
    G90                        ; absolute positioning
    G0 Z25 F3600               ; move nozzle up
    G0 X150 Y290 F6000


[gcode_macro BELT]
description: A macro that assists with repeatable belt tensioning.
variable_y_tensioning_position: 115       #Position the printhead needs to be to have 150mm of belt length exposed for belt tensioning.
gcode:
    {% set x_max = printer.configfile.settings.stepper_x.position_max %}
    {% set travel_speed = printer.configfile.settings.printer.max_velocity %}

    G90                        ; absolute positioning
    G0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}
    { action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }


[gcode_macro GIT_BACKUP]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg


[gcode_shell_command backup_cfg]
command: sh /home/pi/klipper_config/.autocommit.sh
timeout: 30.
verbose: True


[gcode_macro COOLDOWN]
gcode:
    {action_respond_info("Cooling down")}
    TURN_OFF_HEATERS 
    _BLINK_LED
    SET_LED_EFFECT EFFECT=display_dial_heating_abs STOP=1
    SET_LED_EFFECT EFFECT=display_dial_heating_pla STOP=1
    SET_LED_EFFECT EFFECT=display_dial_default


[gcode_macro HEATSOAK_PLA]
gcode:
    {action_respond_info("Heating bed to 60")}
    M140 S60
    _FLASH_LED_1 
    SET_LED_EFFECT EFFECT=display_dial_default STOP=1
    SET_LED_EFFECT EFFECT=display_dial_heating_abs STOP=1
    SET_LED_EFFECT EFFECT=display_dial_heating_pla


[gcode_macro HEATSOAK_ABS]
gcode:
    {action_respond_info("Heating bed to 110")}
    M140 S110
    _FLASH_LED_2
    SET_LED_EFFECT EFFECT=display_dial_default STOP=1
    SET_LED_EFFECT EFFECT=display_dial_heating_pla STOP=1
    SET_LED_EFFECT EFFECT=display_dial_heating_abs


[gcode_macro MOTORS_OFF]
gcode:
    M18 
    _BLINK_LED


[gcode_macro LOAD]
gcode:
    M104 S150                        ; set TAP-safe temp and continue
    {% if "xyz" not in printer.toolhead.homed_axes %}
      M117 Homing...
      G28
    {% endif %}
    G90                              ; absolute positioning
    G0 X210 Y302 F6000
    M117 Heating hotend...
    M109 S230                        ; set and wait for ABS-extrudable temp
    SAVE_GCODE_STATE NAME=LOADFILAMENT
    M83                              ; set extruder to relative
    M117 Purging...
    G1 E23 F600                      ; extrude 23mm to clear previous filament
    #G1 E-10.0 F3600                 ; retract
    CLEAN_NOZZLE                     ; will extrude an additional 12mm in preparation for printing, total of 35mm purged
    G1 E-7 F3600                     ; CLEAN_NOZZLE only retracts 3mm in preparation for printing, retract an additional 7mm to get to the full 10mm
    M104 S0                          ; turn off hotend
    M117
    RESTORE_GCODE_STATE NAME=LOADFILAMENT


[gcode_macro CLEAN]
gcode:
    M117 Pre-heating hotend...
    M104 S150                        ; set TAP-safe temp and continue
    {% if "xyz" not in printer.toolhead.homed_axes %}
      M117 Homing XYZ...
      G28
    {% endif %}
    FRONT                            ; move to front of bed
    M117 Heating hotend...
    M109 S250                        ; set and wait for cleaning temp
    SAVE_GCODE_STATE NAME=CLEANFILAMENT
    M117 Cleaning...
    M83                              ; set extruder to relative
    G1 E25 F50                       ; extrude 25mm to clear most of previous filament
    G1 E-5.0 F200                    ; retract
    G1 E15.0 F3000                   ; extrude 15
    G1 E-5.0 F200                    ; retract
    G1 E15.0 F3000                   ; extrude 15
    G1 E-5.0 F200                    ; retract
    G1 E10.0 F3000                   ; extrude 10 to make sure filament fills the nozzle
    M109 S90                         ; set hotend to cold-pull temp
    M117 Ready for cold pull
    RESTORE_GCODE_STATE NAME=CLEANFILAMENT


#####################################################################
#   Skirt Buttons
#####################################################################


[gcode_button BUTTON_HEATSOAK]
pin: ^!PB14
press_gcode:
  	{% if printer.heater_bed.target == 110 %}
        M117
        COOLDOWN
	{% elif printer.heater_bed.target == 60 %}
        M117 Heatsoaking ABS...
        HEATSOAK_ABS
	{% else %}
        M117 Heatsoaking PLA...
        HEATSOAK_PLA
	{% endif %}
release_gcode:

[gcode_button BUTTON_CASELIGHT]
pin: ^!PB13
press_gcode:
    SET_PIN PIN=caselight VALUE=1
release_gcode:
    SET_PIN PIN=caselight VALUE=0.3


[gcode_button BUTTON_MICROSTEP_UP]
pin: ^!PC2
press_gcode:
    {action_respond_info("Microstepping up")}
    #_FLASH_LED_1
    SET_GCODE_OFFSET Z_ADJUST=0.01
release_gcode:


[gcode_button BUTTON_MICROSTEP_DOWN]
pin: ^!PC1
press_gcode:
    {action_respond_info("Microstepping down")}
    #_FLASH_LED_1
    SET_GCODE_OFFSET Z_ADJUST=-0.01
release_gcode:



#####################################################################
#   Misc
#####################################################################


[delayed_gcode _BOOT_CASELIGHT] 
initial_duration: 0.1
gcode:
    _BLINK_LED


[gcode_macro _LED_TOGGLE]
description: Toggle light
gcode: 
    {% if printer['output_pin caselight'].value == 0 %} 
        SET_PIN PIN=caselight VALUE=0.5
        {action_respond_info("Caselight on")}
    {% else %} 
        SET_PIN PIN=caselight VALUE=0
        {action_respond_info("Caselight off")}
    {% endif %}


[gcode_macro _FLASH_LED_1]
description: Blink caselight one time
gcode:
    SET_PIN PIN=caselight VALUE=1
    G4 P120
    SET_PIN PIN=caselight VALUE=.5


[gcode_macro _FLASH_LED_2]
description: Blink caselight one time
gcode:
    SET_PIN PIN=caselight VALUE=1
    G4 P120
    SET_PIN PIN=caselight VALUE=.5
    G4 P120
    SET_PIN PIN=caselight VALUE=1
    G4 P120
    SET_PIN PIN=caselight VALUE=.5


[gcode_macro _BLINK_LED]
description: Blink caselight one time
gcode:
    SET_PIN PIN=caselight VALUE=0
    G4 P480
    SET_PIN PIN=caselight VALUE=.05
    G4 P0
    SET_PIN PIN=caselight VALUE=.1
    G4 P0
    SET_PIN PIN=caselight VALUE=.15
    G4 P0
    SET_PIN PIN=caselight VALUE=.2
    G4 P0
    SET_PIN PIN=caselight VALUE=.25
    G4 P0
    SET_PIN PIN=caselight VALUE=.3
    G4 P0
    SET_PIN PIN=caselight VALUE=.35
    G4 P0
    SET_PIN PIN=caselight VALUE=.4
    G4 P0
    SET_PIN PIN=caselight VALUE=.45
    G4 P0
    SET_PIN PIN=caselight VALUE=.5


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        #RESETRGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}


[gcode_macro M600]
gcode:
    #{% set X = params.X|default(50)|float %}
    #{% set Y = params.Y|default(0)|float %}
    #{% set Z = params.Z|default(10)|float %}
    #SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    #G91
    #G1 E-.8 F2700
    #G1 Z{Z}
    #G90
    #G1 X{X} Y{Y} F3000
    #G91
    #G1 E-10 F3600
    #RESTORE_GCODE_STATE NAME=M600_state


[gcode_macro TEST_SPEED]
gcode:
	#  Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	#  Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	#  Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	#  Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	#  Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	#  Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	#  Absolute positioning
	G90
	
	#  Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	#  Home and get position for comparison later:
		G28
		#  QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	#  Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		#  Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		#  Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	#  Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	#  Re-home XY and get position again for comparison:
		G28 X Y
		#  Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	#  Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED


#  Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
#  For use with Marlin's linear advance calibration: https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
	#  Parameters
	{% set pa = params.K|float %}
	SET_PRESSURE_ADVANCE ADVANCE={pa}


#  For testing TAP

[gcode_macro TEST_PROBE_ACCURACY_150]
gcode:
	TEST_PROBE_ACCURACY EXTRUDER_TEMP=150

[gcode_macro PROBE_ACCURACY_10]
gcode:
	PROBE_ACCURACY SAMPLES=10

[gcode_macro PROBE_ACCURACY_25]
gcode:
	PROBE_ACCURACY SAMPLES=25

[gcode_macro PROBE_ACCURACY_50]
gcode:
	PROBE_ACCURACY SAMPLES=50


# Used for manual input shaper calibration with ringing tower print
[gcode_macro RINGING_TOWER]
gcode:
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000
    SET_PRESSURE_ADVANCE ADVANCE=0
    SET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0
    TUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5


# PF's Input Shaper Macros

[gcode_shell_command generate_graphs]
command: sh /home/pi/klipper_config/.generate_graphs.sh
timeout: 320.
verbose: True

[gcode_macro GENERATE_GRAPHS]
gcode:
    RUN_SHELL_COMMAND CMD=generate_graphs

[gcode_shell_command graph_resonance]
command: sh /home/pi/klipper_config/.graph_resonance.sh
timeout: 320.
verbose: True

[gcode_macro GRAPH_RESONANCE]
gcode:
    RUN_SHELL_COMMAND CMD=graph_resonance

[gcode_macro TEST_X]
gcode:
    TEST_RESONANCES AXIS=X

[gcode_macro TEST_Y]
gcode:
    TEST_RESONANCES AXIS=y

[gcode_macro MEASURE_SENSOR_NOISE]
gcode:
    MEASURE_AXES_NOISE

[gcode_macro QUERY_ACCELEROMETER]
gcode:
    ACCELEROMETER_QUERY

[gcode_macro MEASURE_RESONANCE]
gcode:
    TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data
    TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data

[gcode_shell_command clear_data]
command: sh /home/pi/klipper_config/.clear_data.sh
timeout: 320.
verbose: True


[gcode_macro CLEAR_DATA]
gcode:
    RUN_SHELL_COMMAND CMD=clear_data


# Gadget Angle's GCode Search Macro

[gcode_macro SEARCH_GCODE_ROUTINES]
# This Macro lists all your user defined g-code macros that use a command that you specify in NAME=
#
# use : SEARCH_GCODE_ROUTINES NAME=m190
#
# if you want a list all your user_define G-Code macros just run the command without arguments: SEARCH_GCODE_ROUTINES
#
# URL: https://github.com/AndrewEllis93/Print-Tuning-Guide/blob/main/articles/useful_macros.md#dump-variables

#printer['configfile'].config = {'gcode_macro CURRENT_NORMAL': {'gcode': '\n_general_Debug msg="CURRENT_NORMAL - entering"}}
gcode:
    {% set filter_name = params.NAME|default(' ')|string|lower %}
    
    {% set out = [] %}
    {% set ns = namespace(num=0, delayed_num=0) %}
    {% set string3 = "gcode_macro " %}
    {% set string3_2 = "delayed_gcode" %}
    {% set string4 = "gcode" %}
    {% set gcodetxt1 = "G-CODE_________name" %}
    {% set gcodetxt2 = "DELAYED_G-CODE_name" %}
    
    {% for key1 in printer %}
        {% for key2 in printer[key1] %}            
            {% if ( (key1|lower == 'configfile') and (key2|lower in ['config']) ) %}
                    {% if printer[key1][key2].items() %}
                        {% for key3, value3 in printer[key1][key2].items() %}
                            #comment : key3 = gcode_macro print_end; value3 = {'gcode': '\n_general_debug msg="
                            {% if string3 in key3 or string3_2 in key3%}
                                    {% for key4, value4 in value3.items() %}
                                         # comment : key4 = gcode; value4={% set message = params.msg %}
                                        {% if ((string4 in key4) and ((filter_name|lower) in (value4|lower))) %}
                                              {% if string3 in key3 %}
                                                  {% set ns.num = ns.num + 1 %}
                                                  {% set dummy4 = out.append('%19s[%d]: %s' % ( (gcodetxt1.rjust(19," ")), ns.num, key3[12:]|upper) ) %}
                                              {% elif string3_2 in key3 %}
                                                  {% set ns.delayed_num = ns.delayed_num + 1 %}
                                                  {% set dummy4 = out.append("%19s[%d]: %s" % ( gcodetxt2, ns.delayed_num, key3[14:]|upper) ) %}
                                              {% endif %}
                                        {% else %}
                                        {% endif %} 
                                    {% endfor %}
                            {% endif %}
                        {% endfor %}
                    {% endif %}
           {% endif %}
        {% endfor %}
    {% endfor %}  
    {action_respond_info("Found a TOTAL of %d occurrances for %s command in USER MACROS." % ((ns.num + ns.delayed_num), filter_name|upper)) }
    {action_respond_info("Found %d occurrances in G-Code macros & Found %d occurrances in DELAYED G-Code macros." % (ns.num, ns.delayed_num)) }
    {action_respond_info("The following list of G-Code macros contains the command:")}
    {action_respond_info(out|join("\n"))}