#####################################################################
#   Macros
#####################################################################

[idle_timeout]
timeout: 3600
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=status_idle
    SET_LED_EFFECT EFFECT=display_screen_default
    SET_LED_EFFECT EFFECT=display_dial_default

[safe_z_home]
#home_xy_position: 172.5,308  # Sexbolt
home_xy_position: 150,290
z_hop: 5.0

[z_tilt]
z_positions:
	-46, 20
	150, 338
	346, 20
points:
    10, 10
	150, 290
	290, 10
speed: 400
horizontal_move_z: 3
retries: 7
retry_tolerance: 0.007

[bed_mesh]
speed: 300
horizontal_move_z: 5
mesh_min: 40, 40
mesh_max: 260,260
fade_start: 0.6
fade_end: 10.0
probe_count: 5,5
algorithm: bicubic
relative_reference_index: 12


[gcode_macro PRINT_START]
gcode:
    {% set BED = params.BED|default(110)|int %}
    {% set HOTEND = params.HOTEND|default(250)|int %}

    M117 Heating bed...
    M190 S{BED}                       ; set final bed temperature and wait for it to be reached
    SET_LED_EFFECT EFFECT=display_dial_heating_abs STOP=1
    SET_LED_EFFECT EFFECT=display_dial_heating_pla STOP=1
    {% if BED < 100 %}            ;  set dial color to bed ABS/PLA
        SET_LED_EFFECT EFFECT=display_dial_pla
    {% else %}
        SET_LED_EFFECT EFFECT=display_dial_abs
    {% endif %}
    M104 S{HOTEND*0.60}               ; start preheating hotend to non-ooze temperature prior to homing and mesh
    SET_LED_EFFECT EFFECT=status_idle STOP=1
    SET_LED_EFFECT EFFECT=status_heating_abs STOP=1
    SET_LED_EFFECT EFFECT=status_heating_pla STOP=1
    {% if HOTEND < 230 %}            ;  set SB color to heating ABS/PLA
        SET_LED_EFFECT EFFECT=status_heating_pla
    {% else %}
        SET_LED_EFFECT EFFECT=status_heating_abs
    {% endif %}
    SET_LED_EFFECT EFFECT=status_homing
    {% if "xyz" not in printer.toolhead.homed_axes %}
      M117 Homing...
      G28
    {% else %}
      M117 Updating Z...
      G28 Z
    {% endif %}
    SET_LED_EFFECT EFFECT=status_homing STOP=1
    SET_LED_EFFECT EFFECT=status_leveling
    {% if printer.z_tilt.applied %}
    {% else %}
      M117 Leveling...
      Z_TILT_ADJUST
    {% endif %}
    M117 Calibrating mesh...
    SET_LED_EFFECT EFFECT=status_leveling STOP=1
    SET_LED_EFFECT EFFECT=status_meshing
    BED_MESH_CALIBRATE
    SET_LED_EFFECT EFFECT=status_meshing STOP=1
    SET_LED_EFFECT EFFECT=status_nozzle_printing
    G28 Z

    #Purge Line Gcode
    G92 E0
    G90
    G0 X5 Y5 F6000
    M117 Heating extruder...
    M109 S{HOTEND}                    ; set final hotend temperature and wait for it to be reached
    {% if HOTEND < 230 %}            ;  set SB color to heating ABS/PLA
        SET_LED_EFFECT EFFECT=status_heating_pla STOP=1
        SET_LED_EFFECT EFFECT=status_printing_pla
    {% else %}
        SET_LED_EFFECT EFFECT=status_heating_abs STOP=1
        SET_LED_EFFECT EFFECT=status_printing_abs
    {% endif %}
    M117 Purging...
    G0 Z0.4
    G91
    G1 X100 E25 F1200
    G1 E-.3 F3000                     ; retract slightly to try and reduce stringing
    G1 Z6 F3000                       ; move platform down 6mm
    G92 E0
    G90
    G92 E0                            ; zero the extruded length again
    G1 F9000
    M117


[gcode_macro PRINT_END]
gcode:
    M117 Print complete

    #  Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #  Check end position to determine safe directions to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    #  Commence PRINT_END
    M400                             ; wait for buffer to clear
    G92 E0                           ; zero the extruder
    G1 E-10.0 F3600                  ; retract
    G91                              ; relative positioning
    G0 Z{z_safe} F3600               ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000    ; move nozzle to remove stringing

    M104 S0                          ; turn off hotend
    M140 S0                          ; turn off bed
    M106 S0                          ; turn off fan
    G90                              ; absolute positioning
    G0 X{max_x / 2} Y{max_y} F3600   ; park nozzle at rear
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=status_idle
    SET_LED_EFFECT EFFECT=display_screen_default
    SET_LED_EFFECT EFFECT=display_dial_default


[gcode_macro CENTER]
gcode:
    G90
    G0 X150 Y150 Z15 F6000


[gcode_macro FRONT]
gcode:
    G90
    G0 X150 Y20 Z30 F6000


[gcode_macro REAR]
gcode:
    G90
    G0 X150 Y290 Z15 F6000


[gcode_macro GIT_BACKUP]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg


[gcode_shell_command backup_cfg]
command: sh /home/pi/klipper_config/.autocommit.sh
timeout: 30.
verbose: True


[gcode_macro COOLDOWN]
gcode:
    {action_respond_info("Cooling down")}
    TURN_OFF_HEATERS 
    _BLINK_LED
    SET_LED_EFFECT EFFECT=display_dial_heating_abs STOP=1
    SET_LED_EFFECT EFFECT=display_dial_heating_pla STOP=1
    SET_LED_EFFECT EFFECT=display_dial_default


[gcode_macro HEATSOAK_PLA]
gcode:
    {action_respond_info("Heating bed to 60")}
    M140 S60
    _FLASH_LED_1 
    SET_LED_EFFECT EFFECT=display_dial_default STOP=1
    SET_LED_EFFECT EFFECT=display_dial_heating_abs STOP=1
    SET_LED_EFFECT EFFECT=display_dial_heating_pla


[gcode_macro HEATSOAK_ABS]
gcode:
    {action_respond_info("Heating bed to 110")}
    M140 S110
    _FLASH_LED_2
    SET_LED_EFFECT EFFECT=display_dial_default STOP=1
    SET_LED_EFFECT EFFECT=display_dial_heating_pla STOP=1
    SET_LED_EFFECT EFFECT=display_dial_heating_abs


[gcode_macro MOTORS_OFF]
gcode:
    M18 
    _BLINK_LED


[gcode_macro LOAD]
gcode:
    M104 S230                        ; set ABS-extrudable temp and continue
    {% if "xyz" not in printer.toolhead.homed_axes %}
      M117 Homing...
      G28
    {% endif %}
    FRONT                            ; move to front of bed
    M109 S230                        ; set and wait for ABS-extrudable temp
    SAVE_GCODE_STATE NAME=LOADFILAMENT
    M83                              ; set extruder to relative
    G1 E35 F600                      ; extrude 35mm to clear previous filament
    G1 E-10.0 F3600                  ; retract
    M104 S0                          ; turn off hotend
    RESTORE_GCODE_STATE NAME=LOADFILAMENT


#####################################################################
#   Skirt Buttons
#####################################################################


[gcode_button BUTTON_HEATSOAK]
pin: ^!PB14
press_gcode:
  	{% if printer.heater_bed.target == 110 %}
        COOLDOWN
	{% elif printer.heater_bed.target == 60 %}
        HEATSOAK_ABS
	{% else %}
        HEATSOAK_PLA
	{% endif %}
release_gcode:

[gcode_button BUTTON_CASELIGHT]
pin: ^!PB13
press_gcode:
    SET_PIN PIN=caselight VALUE=1
release_gcode:
    SET_PIN PIN=caselight VALUE=0.3


[gcode_button BUTTON_MICROSTEP_DOWN]
pin: ^!PC2
press_gcode:
    {action_respond_info("Microstepping down")}
    _FLASH_LED_1
    SET_GCODE_OFFSET Z_ADJUST=0.01
release_gcode:


[gcode_button BUTTON_MICROSTEP_UP]
pin: ^!PC1
press_gcode:
    {action_respond_info("Microstepping up")}
    _FLASH_LED_1
    SET_GCODE_OFFSET Z_ADJUST=-0.01
release_gcode:



#####################################################################
#   Misc
#####################################################################

[delayed_gcode _BOOT_CASELIGHT] 
initial_duration: 0.1
gcode:
    _BLINK_LED


[gcode_macro _LED_TOGGLE]
description: Toggle light
gcode: 
    {% if printer['output_pin caselight'].value == 0 %} 
        SET_PIN PIN=caselight VALUE=0.5
        {action_respond_info("Caselight on")}
    {% else %} 
        SET_PIN PIN=caselight VALUE=0
        {action_respond_info("Caselight off")}
    {% endif %}


[gcode_macro _FLASH_LED_1]
description: Blink caselight one time
gcode:
    SET_PIN PIN=caselight VALUE=1
    G4 P120
    SET_PIN PIN=caselight VALUE=.5


[gcode_macro _FLASH_LED_2]
description: Blink caselight one time
gcode:
    SET_PIN PIN=caselight VALUE=1
    G4 P120
    SET_PIN PIN=caselight VALUE=.5
    G4 P120
    SET_PIN PIN=caselight VALUE=1
    G4 P120
    SET_PIN PIN=caselight VALUE=.5


[gcode_macro _BLINK_LED]
description: Blink caselight one time
gcode:
    SET_PIN PIN=caselight VALUE=0
    G4 P480
    SET_PIN PIN=caselight VALUE=.05
    G4 P0
    SET_PIN PIN=caselight VALUE=.1
    G4 P0
    SET_PIN PIN=caselight VALUE=.15
    G4 P0
    SET_PIN PIN=caselight VALUE=.2
    G4 P0
    SET_PIN PIN=caselight VALUE=.25
    G4 P0
    SET_PIN PIN=caselight VALUE=.3
    G4 P0
    SET_PIN PIN=caselight VALUE=.35
    G4 P0
    SET_PIN PIN=caselight VALUE=.4
    G4 P0
    SET_PIN PIN=caselight VALUE=.45
    G4 P0
    SET_PIN PIN=caselight VALUE=.5

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-10 F3600
    RESTORE_GCODE_STATE NAME=M600_state


[gcode_macro TEST_SPEED]
gcode:
	#  Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	#  Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	#  Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	#  Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	#  Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	#  Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	#  Absolute positioning
	G90
	
	#  Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	#  Home and get position for comparison later:
		G28
		#  QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	#  Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		#  Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		#  Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	#  Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	#  Re-home XY and get position again for comparison:
		G28 X Y
		#  Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	#  Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED


#  Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
#  For use with Marlin's linear advance calibration: https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
	#  Parameters
	{% set pa = params.K|float %}
	SET_PRESSURE_ADVANCE ADVANCE={pa}


#  For testing REDACTED

[gcode_macro TEST_PROBE_ACCURACY_150]
gcode:
	TEST_PROBE_ACCURACY EXTRUDER_TEMP=150

[gcode_macro PROBE_ACCURACY_10]
gcode:
	PROBE_ACCURACY SAMPLES=10

[gcode_macro PROBE_ACCURACY_25]
gcode:
	PROBE_ACCURACY SAMPLES=25

[gcode_macro PROBE_ACCURACY_50]
gcode:
	PROBE_ACCURACY SAMPLES=50